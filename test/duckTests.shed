package duck;

import structs;

import hat.TestResult;
import hat.TestCase;
import hat.assertTrue;
import hat.assertFalse;
import hat.assertEquals;
import hat.results.all;

import duck;
import duck.Matcher;
import duck.equalTo;

public val duckTests = listOf(
    TestCase("equalTo matches using equals function", fun() =>
        testMatcher(duck.equalTo("blah"), listOf(
            description("\"blah\""),
            positive("blah"),
            negative("Blah", mismatchDescription("was \"Blah\""))
        ))
    ),
    
    TestCase("equalTo matches using struct equals", fun() => do {
        def StringNode class(value: String) => {
            members {
                struct fun() => structs.create(StringNode, listOf(value))
            }
        }
        return testMatcher(duck.equalTo(StringNode("blah")), listOf(
            description("StringNode(\"blah\")"),
            positive(StringNode("blah")),
            negative(StringNode("Blah"), mismatchDescription("was StringNode(\"Blah\")"))
        ));
    }),
    
    TestCase("isList matches if lists are same length and all elements match", fun() => do {
        val list = listOf(equalTo[String]("apple"), equalTo[String]("banana"));
        return testMatcher(duck.isList[String](list), listOf(
            description("listOf(\"apple\", \"banana\")"),
            positive[List[String]](listOf("apple", "banana")),
            negative[List[String]](listOf(), mismatchDescription("list was of length 0")),
            negative[List[String]](
                listOf("apple", "coconut"),
                mismatchDescription("element at index 1 did not match:\n  was \"coconut\"\n  expected \"banana\"")
            )
        ));
    }),
    
    TestCase("anything always matches", fun() =>
        testMatcher(duck.anything, listOf(
            description("<anything>"),
            positive[Unit](listOf("apple", "banana"), "apple", (), false, 5)
        ))
    )
);

def testMatcher fun(matcher: Matcher[T], assertions: List[Func[Matcher[T], TestResult]]) : TestResult =>
    all(assertions.map(fun(assertion: MatcherAssertion) => assertion(matcher)));

def description fun(expectedDescription: String) =>
    fun(matcher: Matcher[Nothing]) =>
        assertEquals[String](expectedDescription, matcher.describeSelf())

def positive fun[T] => (positiveValue: T) =>
    fun(matcher: Matcher[T]) => all(listOf(
        assertTrue(matcher.matches(positiveValue)),
        assertTrue(matcher.matchesWithDescription(positiveValue).matches())
    ))

def negative fun[T] => (negativeValue: T, mismatchDescription: String) =>
    fun(matcher: Matcher[T]) => all(listOf(
        assertFalse(matcher.matches(negativeValue)),
        assertEquals[String](mismatchDescription, matcher.describeMismatch(negativeValue)),
        
        assertFalse(matcher.matchesWithDescription(negativeValue).matches()),
        assertEquals[String](mismatchDescription, matcher.matchesWithDescription(negativeValue).mismatchDescription())
    ))

def mismatchDescription fun(description: String) => description
